format_version: 2
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  - RELEASE_VERSION: 0.9.6
  - BIN_NAME: analytics

workflows:
  # ----------------------------------------------------------------
  # --- workflows for CI and testing
  test:
    before_run:
    - go-test
    steps:
    - script:
        title: Print go environment
        inputs:
        - content: |-
            #!/bin/bash
            set -x
            # bitrise plugin install "./"
            # bitrise :step -h

  go-test:
    before_run:
    - _install_testing_tools
    steps:
    - script:
        title: Print go environment
        inputs:
        - content: |-
            #!/bin/bash
            set -x
            go version
            echo $GO15VENDOREXPERIMENT
    - script:
        title: Export go files to test
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            no_vendor_paths="$(go list ./... | grep -v vendor)"
            envman add --key GOLIST_WITHOUT_VENDOR --value "$no_vendor_paths"
    - script:
        title: Err check
        inputs:
        - content: errcheck -asserts=true -blank=true $GOLIST_WITHOUT_VENDOR
    - script:
        title: Go lint
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            while read -r line; do
              echo "-> Linting: $line"
              golint_out="$(golint $line)"
              if [[ "${golint_out}" != "" ]] ; then
                echo "=> Golint issues found:"
                echo "${golint_out}"
                exit 1
              fi
            done <<< "$GOLIST_WITHOUT_VENDOR"
    - script:
        title: Search for unused constants, variables, functions and types
        inputs:
        - content: |-
            #!/bin/bash
            unused_out=$(for pkg in $(go list ./... | grep -v vendor); do unused "$pkg"; done)
            if [[ "${unused_out}" != "" ]] ; then
              echo "=> Unused output:"
              echo "${unused_out}"
              exit 1
            fi
    - script:
        title: Run gosimple
        inputs:
        - content: |-
            #!/bin/bash
            gosimple_out=$(for pkg in $(go list ./... | grep -v vendor); do gosimple "$pkg"; done)
            if [[ "${gosimple_out}" != "" ]] ; then
              echo "=> gosimple output:"
              echo "${gosimple_out}"
              exit 1
            fi
    - script:
        title: Go test
        inputs:
        - content: go test ./...

  _install_testing_tools:
    title: Install testing tools
    steps:
    - script:
        title: Install testing tools
        run_if: ".IsCI"
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -x

            # Install dependencies
            go get -u github.com/tools/godep

            # Check for unhandled errors
            go get -u github.com/kisielk/errcheck

            # Go lint
            go get -u github.com/golang/lint/golint

            # Check for unused constants, variables, functions and types
            go get honnef.co/go/tools/cmd/unused

            # Search for what could be simplified
            go get honnef.co/go/tools/cmd/gosimple

  # ----------------------------------------------------------------
  # --- workflows for Releasing
  create-release:
    after_run:
    - create_binaries
    steps:
    - script:
        title:
        inputs:
        - content: |
            #!/bin/bash
            set -e

            export CI=true
            releaseman create \
              --version $RELEASE_VERSION \
              --set-version-script "bash _scripts/set_version.sh version/version.go"

  create_binaries:
    title: Create binaries
    description: |
        Creates Linux and Darwin binaries
    steps:
    - script:
        title: Create binaries
        inputs:
        - content: |
            #!/bin/bash
            set -e
            set -x

            echo
            echo "Create final binaries"
            echo "  Build number: $BITRISE_BUILD_NUMBER"

            export ARCH=x86_64
            export GOARCH=amd64

            # Create Darwin bin
            export OS=Darwin
            export GOOS=darwin

            DEPLOY_PATH="_bin/$BIN_NAME-$OS-$ARCH"
            echo "  Create final Darwin binary at: $DEPLOY_PATH"

            go build -o "$DEPLOY_PATH"

            envman add --key OSX_DEPLOY_PATH --value $DEPLOY_PATH
            cp $DEPLOY_PATH $BITRISE_DEPLOY_DIR/$BIN_NAME-$OS-$ARCH
            echo "  Copy final Darwin binary to: $BITRISE_DEPLOY_DIR/$BIN_NAME-$OS-$ARCH"


            # Create Linux binary
            export OS=Linux
            export GOOS=linux

            DEPLOY_PATH="_bin/$BIN_NAME-$OS-$ARCH"
            echo "  Create final Linux binary at: $DEPLOY_PATH"

            go build -o "$DEPLOY_PATH"

            envman add --key LINUX_DEPLOY_PATH --value $DEPLOY_PATH
            cp $DEPLOY_PATH $BITRISE_DEPLOY_DIR/$BIN_NAME-$OS-$ARCH
            echo "  Copy final Linux binary to: $BITRISE_DEPLOY_DIR/$BIN_NAME-$OS-$ARCH"

  # ----------------------------------------------------------------
  # --- workflows for Utility
  godeps-update:
    title: Godeps update
    description: |
      Used for updating bitrise dependencies with godep
    steps:
    - script:
        title: Dependency update
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            go get -u -v github.com/tools/godep
            go get -u -v golang.org/x/sys/unix
            go get -u -v github.com/bitrise-io/envman/models
            go get -u -v github.com/bitrise-io/stepman/models
            go get -u -v github.com/ryanuber/go-glob

            rm -rf ./Godeps
            rm -rf ./vendor

            go get -t -d ./...
            godep save ./...

  analytics_test:
    steps:
    - script:
        inputs:
        - content: sleep 10
